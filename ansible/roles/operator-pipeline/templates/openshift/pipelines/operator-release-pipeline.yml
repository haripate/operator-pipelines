---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: operator-release-pipeline
spec:
  params:
    - name: git_repo_url
      description: ssh address of GitHub repository
    - name: git_revision
      description: git revision used to check out project
      default: "main"
    - name: git_commit
      description: Git repository HEAD commit
    - name: bundle_path
      description: path indicating the location of the certified bundle within the repository
    - name: is_latest
      description: If explicitly set to "true", resulting image will be tagged as "latest"
    - name: registry
      description: temporary registry used by Hosted pipeline to pass the image to Release pipeline.
      default: quay.io
    - name: image_namespace
      description: The namespace/organization where images from Hosted pipeline are stored.
      default: $(context.pipelineRun.namespace)
    - name: env
      description: Which environment to run in. Can be one of [dev, qa, stage, production]
      default: "production"
  workspaces:
    - name: repository
    - name: ssh-dir
      optional: true
    - name: pyxis-ssl-credentials
    - name: github-bot-token
  tasks:
    # Set environment
    - name: set-env
      taskRef:
        name: set-env
        kind: Task
      params:
        - name: env
          value: $(params.env)
        - name: access_type
          value: "internal"

    # Git clone
    - name: checkout
      runAfter:
        - set-env
      taskRef:
        name: git-clone
        kind: Task
      params:
        - name: url
          value: $(params.git_repo_url)
        - name: revision
          value: $(params.git_revision)
      workspaces:
        - name: output
          workspace: repository
          subPath: src
        - name: ssh-directory
          workspace: ssh-dir

    # Get cert project id
    - name: certification-project-check
      runAfter:
        - checkout
      taskRef:
        name: certification-project-check
      params:
        - name: bundle_path
          value: "$(params.bundle_path)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    # Get the bundle versions to build index
    - name: get-supported-versions
      runAfter:
        - checkout
      taskRef:
        name: get-supported-versions
      params:
        - name: bundle_path
          value: $(params.bundle_path)
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    # This task is needed only because of it's second step, which
    # parses the bundle path and returns the package_name and bundle_version.
    # TODO: split this task
    - name: operator-validation
      runAfter:
        - checkout
      taskRef:
        name: operator-validation
      params:
        - name: bundle_path
          value: "$(params.bundle_path)"
        - name: pyxis_url
          value: "$(tasks.set-env.results.pyxis_url)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    # Get additional data necessary for certification
    - name: get-cert-project-related-data
      runAfter:
        - certification-project-check
      taskRef:
        name: get-cert-project-related-data
      params:
        - name: cert_project_id
          value: "$(tasks.certification-project-check.results.certification_project_id)"
        - name: pyxis_url
          value: "$(tasks.set-env.results.pyxis_url)"
        - name: pyxis_cert_path
          value: $(workspaces.pyxis-ssl-credentials.path)/operator-pipeline.pem
        - name: pyxis_key_path
          value: $(workspaces.pyxis-ssl-credentials.path)/operator-pipeline.key
      workspaces:
        - name: pyxis-ssl-credentials
          workspace: pyxis-ssl-credentials

    - name: get-vendor-related-data
      runAfter:
        - get-cert-project-related-data
      taskRef:
        name: get-vendor-related-data
      params:
        - name: org_id
          value: "$(tasks.get-cert-project-related-data.results.org_id)"
        - name: pyxis_url
          value: "$(tasks.set-env.results.pyxis_url)"
        - name: pyxis_cert_path
          value: /workspace/pyxis-ssl-credentials/operator-pipeline.pem
        - name: pyxis_key_path
          value: /workspace/pyxis-ssl-credentials/operator-pipeline.key
      workspaces:
        - name: pyxis-ssl-credentials
          workspace: pyxis-ssl-credentials

    # Publish image to OCP registry
    - name: publish-to-ocp-registry
      runAfter:
        - operator-validation
        - get-vendor-related-data
      taskRef:
        name: publish-to-ocp-registry
      params:
        - name: cert_project_id
          value: "$(tasks.certification-project-check.results.certification_project_id)"
        - name: vendor_label
          value: "$(tasks.get-vendor-related-data.results.vendor_label)"
        - name: repository_name
          value: "$(tasks.get-cert-project-related-data.results.repo_name)"
        - name: dist_method
          value: "$(tasks.get-cert-project-related-data.results.dist_method)"
        - name: image
          value: "$(params.registry)/$(params.image_namespace)/$(tasks.operator-validation.results.package_name)-index:$(tasks.operator-validation.results.bundle_version)"
        - name: is_latest
          value: "$(params.is_latest)"
        - name: bundle_version
          value: "$(tasks.operator-validation.results.bundle_version)"

    # create or update container image
    - name: update-container-image
      runAfter:
        - publish-to-ocp-registry
      taskRef:
        name: update-container-image
      params:
        - name: cert_project_id
          value: "$(tasks.certification-project-check.results.certification_project_id)"
        - name: registry
          value: "$(params.registry)"
        - name: vendor_label
          value: "$(tasks.get-vendor-related-data.results.vendor_label)"
        - name: repository_name
          value: "$(tasks.get-cert-project-related-data.results.repo_name)"
        - name: container_digest
          value: "$(tasks.publish-to-ocp-registry.results.container_digest)"
        - name: bundle_version
          value: "$(tasks.operator-validation.results.bundle_version)"
        - name: is_latest
          value: $(params.is_latest)

    # Publish Vendor, Repository
    - name: publish-resources
      runAfter:
        - update-container-image
      taskRef:
        name: publish-resources
      params:
        - name: cert_project_id
          value: "$(tasks.certification-project-check.results.certification_project_id)"
        - name: org_id
          value: "$(tasks.get-cert-project-related-data.results.org_id)"
        - name: pyxis_url
          value: "$(tasks.set-env.results.pyxis_url)"
        - name: pyxis_cert_path
          value: /workspace/pyxis-ssl-credentials/operator-pipeline.pem
        - name: pyxis_key_path
          value: /workspace/pyxis-ssl-credentials/operator-pipeline.key
        - name: environment
          value: "$(params.env)"
      workspaces:
        - name: pyxis-ssl-credentials
          workspace: pyxis-ssl-credentials

    # call IIB to publish the bundle
    - name: publish-bundle
      runAfter:
        - publish-resources
        - get-supported-versions
      taskRef:
        name: publish-bundle
      params:
        - name: cert_project_id
          value: "$(tasks.certification-project-check.results.certification_project_id)"
        - name: bundle_versions
          value: "$(tasks.get-supported-versions.results.indices)"
        - name: container_digest
          value: "$(tasks.publish-to-ocp-registry.results.container_digest)"

    - name: set-github-status-published
      runAfter:
        - publish-bundle
      taskRef:
        name: set-github-status
      params:
        - name: git_repo_url
          value: $(params.git_repo_url)
        - name: commit_sha
          value: $(params.git_commit)
        - name: description
          value: "Operator $(tasks.operator-validation.results.package_name):$(tasks.operator-validation.results.bundle_version) has
            been published."
        - name: state
          value: "$(tasks.publish-bundle.results.status)"
        - name: context
          value: "$(tasks.operator-validation.results.package_name):$(tasks.operator-validation.results.bundle_version)"
      workspaces:
        - name: github-bot-token
          workspace: github-bot-token
